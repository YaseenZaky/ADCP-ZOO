%% Data setup and organization
%Read in table from .csv file
R = readtable('195101-201607_1701-1704_1802-1804_Zoop 2.csv');
R(:,27:38) = [];

%filter table to dates after 2005 (when ADCP was added) and restrict to
%only lines with data measured by gliders
start_date = datetime(2005, 1, 1);
idx = (start_date < R.Tow_Date);
P = R(idx, :);

%Create time variable in datetime format
P.Tow_Date.Format = 'dd.MM.uuuu HH:mm';
TowSHourMin = datetime(P.Tow_Time,'InputFormat','HH:mm');
TowEHourMin = datetime(P.End_Time,'InputFormat','HH:mm');
TowSTime = P.Tow_Date + timeofday(TowSHourMin);
TowETime = P.Tow_Date + timeofday(TowEHourMin);
P.TowETime = TowETime(:);
P.TowSTime = TowSTime(:);

%remove NaN values and reorganize table
T = rmmissing(P);
T = T(:,[1:19 27 20:21 28 22:26]);

%organize by line
T56 = T(T.St_Line == 56.7,:);
T66 = T(T.St_Line == 66.7,:);
T80 = T(T.St_Line == 80,:);
T90 = T(T.St_Line == 90,:);
T93 = T((T.St_Line == 93.3 | T.St_Line == 93.4),:);

%War

%Clean innapropriately documented values
T.Net_Loc = strrep(T.Net_Loc,'p','P');

%Extracting variables necessary
TowLat = T.Lat_Deg + T.Lat_Min/60;
TowLon = -T.Lon_Deg + -T.Lon_Min/60;
TowDat = T.Tow_Date;
TowSTim = T.TowSTime;
TowETim = T.TowETime;
TowSTimdtnm = datenum(TowSTim);
TowETimdtnm = datenum(TowETim);


%% for fun data
% this shows the unique latitudes present in the tow, maybe use for another
% parameter
[cnt_unique, unique_a] = histogram(TowLat,unique(TowLat));

% this creates a plot of the locations sampled by the tow
figure(1); clf;
geoscatter(TowLat, TowLon,50,'o','filled')
geobasemap colorterrain
count = histcounts2(TowLon, TowLat, 'BinWidth', [3, 3]);

% this creates a plot of the locations sampled by the spray glider
% (remember to load in the data)
figure(1); clf;
geoscatter(bindata.lat, bindata.lon,50,'o','filled')
geobasemap colorterrain

% this converts from Unix time to datestring cell and cell to datetime (ask
% professor if time is beginning or end and how to get both variables)
Spraytimecell = ut2ds(bindata.time);
Spraytime = datetime(Spraytimecell,'InputFormat','dd-MMM-yyyy HH:mm:ss');
Spraytimedtnm = datenum(Spraytime);

%This gives the lat and lon for the glider (see if latu or lat is better)
SprayLon = bindata.lon;
SprayLat = bindata.lat;

% this creates the amount of time the tow took
UwayTime = datetime(T.End_Time,'InputFormat','HH:mm') - datetime(T.Tow_Time,'InputFormat','HH:mm');
UwayTime(UwayTime<0) = UwayTime(UwayTime<0) + hours(24);

% this finds distance traveled during the tow assuming a travel speed of 2
% knots and uses the time previously calculated
UwayDist = minutes((UwayTime)*0.0308667*2);

% This function calculates the distance between the Spray and the Tow in km
Tow2Spraydistandmin = distallpts(TowLon,TowLat,SprayLon,SprayLat);
Tow2Spraydist = Tow2Spraydistandmin(:,1:1927);
Tow2Spraymin = Tow2Spraydistandmin(:,1928);

% This function categorizes the distances by using the radius from the
% tow to see if they are within a general area of approximately 1 km,
% within an approximate radius of 5 km, or out of this general radius
% (these radii need to be more standardized)
[pctdist_from_Tow,Tow_Position] = inrangedist(Tow2Spraymin,UwayDist);

% This function calculates if the glider is within the date for the Tow
Tow_indaterange = inrangedate(Spraytimedtnm,TowETimdtnm);

% This function finds the datapoints that are both in the distance range
% and the date range
[Tow_indatedistrange,Tow_numwithinkm, Tow_numwithinfivekm, Tow_numOut, Tow_numIn,Tow_sum] = inrangedistdate(Spraytimedtnm,TowETimdtnm,Tow2Spraymin,UwayDist,SprayLon,SprayLat);








