function [s,msg] = knb_lter_cce_188_4(pn,cachedata,username,password,entities)%Retrieves and loads EML-described data tables for data package knb-lter-cce.188.4%
%syntax: [s,msg] = knb_lter_cce_188_4(pn,cachedata,username,password,entities)
%
%input:
%   pn = file system path for saving temporary files (default = pwd)
%   cachedata = option to use cached entity files if they exist in pn (0 = no/default, 1 = yes)
%   username = username for HTTPS authentication (default = '')
%   password = password for HTTPS authentication (default = '')
%   entities = cell array of entities to retrieve (default = '' for all)
%
%output:
%   s = 1xn structure containing metadata and data arrays for each downloadable data table, with fields:
%      project = name of the project responsible for the data set (string; repeated for each dimension of s)
%      packageid = data set packageID (string; repeated for each dimension of s)
%      title = data set title (string; repeated for each dimension of s)
%      abstract = data set abstract (string; repeated for each dimension of s)
%      keywords = data set keywords (string; repeated for each dimension of s)
%      creator = data set creator information (cell array; repeated for each dimension of s)
%      contact = data set contact information (cell array; repeated for each dimension of s)
%      rights = data set intellectual rights information (cell array; repeated for each dimension of s)
%      dates = data set temporal coverage (cell array; repeated for each dimension of s)
%      geography = data set geographic coverage (cell array; cell array of descriptions plus corresponding
%         numeric arrays of longitude/latitude pairs for NW, NE, SE, SW corners; repeated for each dimension of s)
%      taxa = data set taxonomic coverage (cell array; species and common names only; repeated for each dimension of s)
%      methods = data set methods and instrumentation (cell array; repeated for each dimension of s)
%      sampling = data set sampling description (cell array; repeated for each dimension of s)
%      entity = data set table (entity) name (string) 
%      url = data table (entity) download URL (string)
%      filename = data set file (object) name (string)
%      description = data table (entity) description (string)
%      names = cell array of column names
%      units = cell array of column units
%      definitions = cell array of column definitions
%      datatypes = cell array of column data types
%      scales = cell array of column measurement scale types
%      codes = cell array of column codes and code definitions
%      bounds = cell array of column bounds (e.g. 'value > 0; value < 10')
%      data = cell array of column data arrays (i.e. typed numeric arrays and cell arrays of strings)
%   msg = text of any error message
%
%notes:
%   1) This m-file calls 'urlwrite' to download EML-described data objects,
%      which requires MATLAB 6.5 (R13) or higher, and calls 'textscan.m' to parse
%      the downloaded data files, which requires MATLAB 7 (R14) or higher.
%   2) If HTTPS downloads fail (e.g. due to SSL errors), cURL with SSL libraries will be used if available in the system path (see http://curl.haxx.se/)
%
%auto-generated by EMLdataset2mfile.xsl v1.1 (http://gce-lter.marsci.uga.edu/public/xsl/toolbox/EMLdataset2mfile.xsl)
%by Wade Sheldon <sheldon@uga.edu>, Georgia Coastal Ecosystems LTER

%check for omitted path, set working directory
if exist('pn','var') ~= 1
   pn = pwd;
elseif ~isdir(pn)
   pn = pwd;
end

%check for omitted cachedata argument, set default to 0 (no) to force new download
if exist('cachedata','var') ~= 1
   cachedata = 0;
end

%check for omitted username argument, set default to '' for none
if exist('username','var') ~= 1
   username = '';
end

%check for omitted password argument, set default to '' for none
if exist('password','var') ~= 1
   password = '';
end

%check for omitted entities argument, set default to '' for all
if exist('entities','var') ~= 1 || isnumeric(entities)
   entities = '';
elseif ischar(entities)
   entities = cellstr(entities);
end

%initialize output and runtime variables
s = [];
msg = '';
fn = '';

%download file table_188.csv or load from cache if entity is specified
if isempty(entities) || sum(strcmpi('OccurrenceandDistributionofSpinyLobsterPhyllosomaPanulirusinterruptusRandall',entities)) > 0
   fn = 'table_188.csv';  %assign filename based on objectName
   url = 'https://pasta.lternet.edu/package/data/eml/knb-lter-cce/188/4/2e66465fa17f78cdc15a2bfc9dce652d';
   if isempty(fn)
      fn = 'OccurrenceandDistributionofSpinyLobsterPhyllosomaPanulirusinterruptusRandall.txt';  %use entityName if objectName element empty
   end
   if cachedata == 0 || exist([pn,filesep,fn],'file') ~= 2
      [fn,msg] = get_file(url,fn,pn,username,password);
   end
else
   fn = '';
end

%check for successful file download
if ~isempty(fn)

   %declare entity title and description
   entityname = 'OccurrenceandDistributionofSpinyLobsterPhyllosomaPanulirusinterruptusRandall';
   filename = 'table_188.csv';
   entitydesc = 'Main data table for dataset';

   %declare parameters for textcan function
   headerlines = 1;
   terminator = '\n';
   terminator = strrep(strrep(terminator,'#x0A','\n'),'#x0D','\r'); %convert entity references to conventional symbols

   delimiter = ',';
   delimiter = strrep(delimiter,'#x20',' ');  %convert space entity reference to space literal

   collapse_delim = '';
   if strcmpi('yes',collapse_delim) == 1
      collapse = 1;
   else
      collapse = 0;
   end

   %declare format string for textscan function
   fstr = '%q%q%q%q%f%f%f%f%f%f%f%q%f%f%f%f%f%f%f%f%f%f%f%f%q';

   %declare arrays of distinct string and numeric missing value codes
   missingvals = {'','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL','NULL'};
   missingvals = strrep(missingvals,'NaN','');  %convert NaN to empty (native missing value code)
   missingvals = missingvals(~cellfun('isempty',missingvals));  %remove empty cells
   Inumeric = ~isnan(str2double(missingvals)); %get index of numeric missing value codes
   missingvals_num = unique(str2double(missingvals(Inumeric))); %convert numeric missing value codes to double array
   Istring = ~Inumeric;  %get index of string missing value codes
   missingvals = unique(missingvals(Istring));  %generate string missing value codes for textscan function

   %declare array of attribute names
   att_names = { ...
      'Sorting Lab', ...
      'Year Month of Tow', ...
      'Tow Collection Day', ...
      'Ship', ...
      'Station Line', ...
      'Station Number', ...
      'Latitude', ...
      'Longitude', ...
      'Max Tow Depth', ...
      'Volume Water Filtered', ...
      'Aliquot %', ...
      'Aliquot Adjustment Value', ...
      'Total Phyllosoma', ...
      'Stage 1', ...
      'Stage 2', ...
      'Stage 3', ...
      'Stage 4', ...
      'Stage 5', ...
      'Stage 6', ...
      'Stage 7', ...
      'Stage 8', ...
      'Stage 9', ...
      'Stage 10', ...
      'Stage 11', ...
      'Study Flag' ...
   };

   %declare array of attribute descriptions
   att_desc = { ...
      'A word or set of words by which a person, animal, place, or thing is known, addressed, or referred to', ...
      'Pacific Standard Time date.', ...
      'Pacific Standard Time date.', ...
      'the type of physical staging for instrument deployment or data gathering', ...
      'location in which an animal was observed', ...
      'location in which an animal was observed', ...
      'latitude measured from the equator in decimal degrees, South is negative', ...
      'longitude measured from the Prime Meridian in decimal degrees, West is negative', ...
      'measurement or sample collection distance from water column surface', ...
      'biomass', ...
      'Percentage of a sample preserved out of 100% collected', ...
      'correction factor', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'From the set of non-negative integers {0,1,2,...}, the number of items.', ...
      'Flag denoted the certainty of the study of origination for these data.' ...
   };

   %declare array of attribute types
   att_types = lower({ ...
      'string', ...
      'string', ...
      'date', ...
      'string', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'string', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'double', ...
      'string' ...
   });

   %declare array of attribute units
   att_units = { ...
      '', ...
      '', ...
      'YYYY-MM-DD', ...
      '', ...
      '', ...
      '', ...
      'degree', ...
      'degree', ...
      'meter', ...
      'milliliterPerThousandCubicMeter', ...
      '', ...
      'dimensionless', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      'number', ...
      '' ...
   };

   %declare array of measurement scales
   att_scales = { ...
      'nominal', ...
      'nominal', ...
      'datetime', ...
      'nominal', ...
      'nominal', ...
      'nominal', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'ratio', ...
      'nominal', ...
      'ratio', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'interval', ...
      'nominal' ...
   };

   %declare array of code definitions
   att_codes = { ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '1 = Exact match on line, station, and date, 2 = Exact match on date, line and/or station had to be rounded to match, 3 = Exact match on line and station, date matches +/- 1 day (this is to account for possible time zone inconsistencies), 4 = Date matches +/- 1 day, line and/or station had to be rounded to match, 5 = Exact match on line and station, date does not match, 6 = Determined from CalCOFI Memorandums, 7 = Unmatched' ...
   };

   %declare array of value bounds
   att_bounds = { ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '', ...
      '' ...
   };

   %initialize structure dimension for first data table
   if isempty(s)
      dim = 1;
      s = struct('packageid','', ...
         'project','', ...
         'title','', ...
         'abstract','', ...
         'keywords','', ...
         'creator','', ...
         'contact','', ...
         'rights','', ...
         'dates','', ...
         'geography','', ...
         'taxa','', ...
         'methods','', ...
         'sampling','', ...
         'entity','', ...
         'url','', ...
         'filename','', ...
         'description','', ...
         'names','', ...
         'units','', ...
         'definitions','', ...
         'datatypes','', ...
         'scales','', ...
         'codes','', ...
         'bounds','', ...
         'data','');
   else
      dim = length(s) + 1;
   end

   %populate structure fields for current data table
   s(dim).entity = entityname;
   s(dim).url = url;
   s(dim).filename = filename;
   s(dim).description = entitydesc;
   s(dim).names = att_names';
   s(dim).units = att_units';
   s(dim).definitions = att_desc';
   s(dim).datatypes = att_types';
   s(dim).scales = att_scales';
   s(dim).codes = att_codes';
   s(dim).bounds = att_bounds';

   %parse downloaded file
   err = [];  %initialize error object
   try
      fid = fopen(fn,'r');  %open file for read
      if ~isempty(missingvals) && ~isempty(delimiter) && ~isempty(terminator)
         %run textscan with missing value codes
         ar = textscan(fid,fstr,'Delimiter',delimiter,'EndOfLine',terminator,'Headerlines',headerlines, ...
            'TreatAsEmpty',missingvals,'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      elseif ~isempty(delimiter) && ~isempty(terminator)
         %run textscan without missing value codes
         ar = textscan(fid,fstr,'Delimiter',delimiter,'EndOfLine',terminator,'Headerlines',headerlines, ...
            'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      elseif ~isempty(delimiter)
         %run textscan without missing value codes or explicit line terminator
         ar = textscan(fid,fstr,'Delimiter',delimiter,'Headerlines',headerlines,'MultipleDelimsAsOne',collapse,'ReturnOnError',0);
      else
         %run textscan without missing value codes or explicit terminator or delimiters
         ar = textscan(fid,fstr,'Headerlines',headerlines,'ReturnOnError',0);
      end
      fclose(fid);  %close file handle
   catch err
      ar = [];  %return empty array on error
   end
   if ~isempty(err)
      msg = err.message;
   end

   %extract data arrays from single cell, add to output structure

   %convert numeric values matching numeric missing values codes to NaN
   if ~isempty(ar) && ~isempty(missingvals_num)
      for col = 1:length(ar)
         vals = ar{col};
         if isnumeric(vals)
            Inull = zeros(length(vals),1);  %init index of missing values
            for missval = 1:length(missingvals_num)
               Inull(vals == missingvals_num(missval)) = 1;  %update index for any values matching a missing value code
            end
            Inull = find(Inull);
            if ~isempty(Inull)
               vals(Inull) = NaN;
               ar{col} = vals;
            end
         end
      end
   end

   %add data arrays to structure field
   s(dim).data = ar(:);

end

%check for successful file download and parsing
if ~isempty(s)

   %set basic metadata contents from document
   packageid = 'knb-lter-cce.188.4';
   titlestr = 'Data pertaining to lobster phyllosoma, Panulirus interruptus, collection methods, locations, identification and staging (1951-2008, months of July and August)';
   abstract = 'The very large collection of plankton hauls taken in connection with the California Cooperative Oceanic Fisheries Investigations (CalCOFI) has afforded a unique opportunity to study the occurrence and distribution of the phyllosoma larvae of the spiny lobster. JOHNSON, MARTIN W. 1960. The Distribution of Larvae of the Spiny Lobster, Panulirus interruptus (Randall) with Records on P. Gracilis Streets. California Cooperative Fisheries Investigation 7: 413-46.';

   %set project title and funding
   project = '';
   %build cell array of creator contact information with labeled fields
   creators = { ...
         'Name: Tony Koslow'; ...
         '   Email: tkoslow@ucsd.edu'; ...
         '   Organization: SIO'; ...
      };

   %build cell array of dataset contact information with labeled fields
   contacts = { ...
         'Position: CCE LTER Information Manager'; ...
         '   Email: ccelter-im@ucsd.edu'; ...
         '   Organization: California Current Ecosystem LTER'; ...
      };

   %build character array of dataset usage rights
   rights = { ...
         'The data available here are intended for scholarly use by the research community, with the express understanding that data users will properly acknowledge the originating investigator. Use or reproduction of any material herein for any commercial purpose is prohibited without prior written permission from the responsible party.'; ...
      };
   %build character array of keywords
   keywords = 'invertebrates, habitats, marine, taxonomy, ecology, food webs, populations, population dynamics, light, zooplankton, Population Studies';

   %build cell array of study dates
   dates = { ...
         'BeginDate: 1951'; ...
         'EndDate: 2008'; ...
      };

   %build cell array of geographic names and bounding box coordinates (NW, NE, SE, SW)
   geography = { ...
      };

   %build cell array of taxa
   taxa = { ...
      };

   %build cell array of methods and instruments
   methods = { ...
         'method: General Methods -- More information will be given as the Materials and Methods section is drawn up. For now references include: JOHNSON, MARTIN W. 1956. The Larval Development of the California Spiny Lobster, Panulirus Interruptus (Randall), with Notes on Panulirus Gracilis Streets. Proceedings of the California Academy of Sciences.4: 1-19. JOHNSON, MARTIN W. 1960. The Offshore Drift of Larvae of the California Spiny Lobster Panulirus Interruptus. California Cooperative Fisheries Investigation 7: 147-161. JOHNSON, MARTIN W. 1960. The Distribution of Larvae of the Spiny Lobster, Panulirus Interruptus (Randall) with Records on P. Gracilis Streets. California Cooperative Fisheries Investigation 7: 413-46. JOHNSON, MARTIN W. and KNIGHT, MARGARET. 1966. The Phyllosoma Larvae of the Spiny Lobster Panulirus Inflatus (Bouvier). Crustaceana 10 (1): 31-47 DEXTER, DEBORAH M. 1972. Molting and Growth in Laboratory Reared Phyllosomes of the California Spiny Lobster, Panulirus Interrupts. California Fish and Game 58(2): 107-115. '; ...
         'method: Frequency -- CalCOFI tows collected in the months of July and August 1951-2009 '; ...
      };

   %build cell array of sampling description information
   sampling = { ...
      };

    %add document-level metadata to all structure dimensions
    for cnt = 1:length(s)
       s(cnt).project = project;
       s(cnt).packageid = packageid;
       s(cnt).title = titlestr;
       s(cnt).abstract = abstract;
       s(cnt).keywords = keywords;
       s(cnt).creator = creators;
       s(cnt).contact = contacts;
       s(cnt).rights = rights;
       s(cnt).dates = dates;
       s(cnt).geography = geography;
       s(cnt).taxa = taxa;
       s(cnt).methods = methods;
       s(cnt).sampling = sampling;
    end

else
   msg = 'no compatible data tables were successfully downloaded';
end

return


%----------------------------------------------------------------
%subfunction to download or copy a file to a local directory path
%----------------------------------------------------------------

function [fqfn,msg] = get_file(url,fn,pn,username,password)
%Fetches a file from an HTTP, HTTPS, FTP or file system URL
%and returns a fully qualified local filename for loading or transformation
%
%syntax: [fqfn,msg] = get_file(url,fn,pn,username,password)
%
%input:
%   url = http, https, ftp or file system address of the file
%   fn = filename for downloaded file
%   pn = pathname for downloading or copying file
%   username = username for HTTPS authentication (default = '')
%   password = password for HTTPS authentication (default = '')
%
%output:
%   fqfn = fully-qualified local filename
%   msg = text of any error message
%
%notes:
%   2) HTTPS downloads depend on access to cURL with SSL libraries in the system path (see http://curl.haxx.se/)
%
%contact:
%  Wade Sheldon
%  GCE-LTER Project
%  Department of Marine Sciences
%  University of Georgia
%  Athens, GA 30602-3636
%  sheldon@uga.edu
%
%last modified: 18-Jun-2013

%init output
fqfn = '';
msg = '';

%check for nonempty string url
if nargin >= 2 && ischar(url) && ~isempty(url) && ~isempty(fn)

   %validate path
   if exist('pn','var') ~= 1;
      pn = pwd;  %default to working directory if path omitted
   elseif ~isdir(pn)
      pn = pwd;  %default to working directory if path invalid
   end

   %check for omitted username argument, set default to '' for none
   if exist('username','var') ~= 1
      username = '';
   end

   %check for omitted password argument, set default to '' for none
   if exist('password','var') ~= 1
      password = '';
   end

   %init error flag
   err = 0;

   %download file using appropriate command based on protocol
   if strncmpi(url,'https',5)
      %try urlwrite for https first
      try
         urlwrite(url,[pn,filesep,fn]);
      catch errmsg
         err = 1;
      end
      %try cUrl if urlwrite fails
      if err == 1
         err = 0;
         %generate curl command to evaluate
         if isempty(username)
            cmd = ['curl -s -X GET "',url,'" -o "',pn,filesep,fn,'"'];
            cmd_insecure = ['curl -k -s -X GET "',url,'" -o "',pn,filesep,fn,'"'];
         else
            cmd = ['curl -s -u ',username,':',password,' -X GET "',url,'" -o "',pn,filesep,fn,'"'];
            cmd_insecure = ['curl -k -s -u ',username,':',password,' -X GET "',url,'" -o "',pn,filesep,fn,'"'];
         end
         %run curl command, checking for system or cURL errors
         try
            [status,res] = system(cmd);
         catch errmsg
            err = 1;
         end
         if err == 1 || status > 0
            try
               %fall back to insecure SSL on certificate error
               [status,res] = system(cmd_insecure);
               if status > 0
                  err = 1;
               end
            catch errmsg
               err = 1;
            end
         end
      end
   elseif strncmpi(url,'http',4)
      %use urlwrite for http
      try
         urlwrite(url,[pn,filesep,fn]);
      catch errmsg
         err = 1;
      end
   elseif strncmpi(url,'ftp',3)
      %use urlwrite for ftp
      try
         urlwrite(url,[pn,filesep,fn]);
      catch errmsg
         err = 1;
      end
   elseif exist(url,'file') == 2
      %copy file from local system or UNC path to specified directory
      try
         copyfile(url,[pn,filesep,fn]);
      catch errmsg
         err = 1;
      end
   else
      err = 1; %unsupported option or invalid file url
   end

   %check for errors
   if err == 0 && exist([pn,filesep,fn],'file') == 2
      fqfn = [pn,filesep,fn];
   else
      msg = ['failed to retrieve the file from the specified url (',errmsg.message,')'];
   end

end

return





